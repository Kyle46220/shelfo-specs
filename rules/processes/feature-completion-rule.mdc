---
description: 
globs: **/*.feature, **/*.steps.ts, **/*.test.ts, **/*.test.tsx
alwaysApply: false
---
---
description: Rules for documenting completed features in project documentation
globs: **/*.feature, **/*.steps.ts, **/*.test.ts, **/*.test.tsx
alwaysApply: false
---

# Feature Completion Documentation Rules

## Purpose
This rule ensures that all completed features are properly documented in the project tracking files, creating a comprehensive record of implementation details and maintaining up-to-date project status.

## Required Documentation Actions

After a feature has been fully implemented and all tests are passing, the following documentation actions MUST be performed:

### 1. Update tasks.md with Implementation Record

Add a new section to `tasks/tasks.md` with the following structure:

```markdown
## [Feature Name] - Completed [Date]

### Implementation Summary
[Provide a concise summary of the implementation approach, key decisions made, and any notable challenges overcome]

### Implemented Files
- User Story: `stories/[module]/[feature].story.md`
- Feature Definition: `features/[module]/[feature].feature`
- Step Definitions: `features/[module]/[feature].steps.ts`
- Unit Tests: `src/[module]/[file].test.ts`
- Implementation: `src/[module]/[file].ts`
[Add any additional relevant files]

### Acceptance Criteria Status
- [x] [Criterion 1]
- [x] [Criterion 2]
- [x] [Criterion 3]
[Copy all acceptance criteria from the user story and mark as completed]

### Technical Notes
- [Note any technical considerations, performance optimizations, or architectural decisions]
- [Document any dependencies on other features or components]
- [Include any information that would be helpful for future maintenance]
```

### 2. Update status.md with Project Progress

Update `docs/status.md` with:

1. Move the feature from "In Progress" to "Completed" section
2. Update overall project completion percentage
3. Add any new insights or learnings from the implementation
4. Update next priorities based on the completion of this feature

Example update:

```markdown
## Project Status Update [Date]

### Recently Completed
- [Feature Name]: All tests passing, documentation updated

### Current Progress
- Overall completion: [X]%
- [Updated metrics on test coverage, features completed, etc.]

### Next Priorities
- [Next feature to implement]
- [Any follow-up tasks identified during implementation]
```

### 3. Cross-Reference Documentation

Ensure that:
- The user story document references the completed feature files
- The feature file header includes a reference to the user story
- All related documentation is consistent and up-to-date

## Verification Checklist

Before considering the documentation complete, verify:

- [ ] All implementation details are accurately recorded in tasks.md
- [ ] All relevant files are listed with correct paths
- [ ] All acceptance criteria are marked as completed
- [ ] Project status is updated in status.md
- [ ] Cross-references between documents are accurate
- [ ] Any new tasks or follow-up items are properly documented

## Best Practices

- Document immediately after feature completion while details are fresh
- Be specific about implementation approaches and decisions
- Include enough detail for someone unfamiliar with the feature to understand
- Highlight any patterns or solutions that could be reused elsewhere
- Note any deviations from the original plan and the reasons for them
- Record any lessons learned that could benefit future development