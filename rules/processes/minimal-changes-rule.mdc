---
description: 
globs: 
alwaysApply: true
---
 ---
description: Enforce minimal changes to files, prioritizing simplicity and focus
globs: **/*.*
alwaysApply: true
---
# Minimal Changes Rule

<rule>
name: minimal_changes
description: Enforces minimal, simple changes to meet specifications without adding extras
filters:
  - type: event
    pattern: "file_update|file_create"

actions:
  - type: suggest
    message: |
      ## Minimal Changes Rule
      
      When making changes to files:
      
      1. Make only the minimal changes required to meet specifications
      2. Choose the simplest implementation approach
      3. Do not add extra features or "nice-to-have" elements
      4. Focus on the specific requirements, not potential future needs
      5. Refactor only what is necessary for the current task
      6. Use existing patterns and conventions when possible
      7. Avoid premature optimization
      8. Keep diffs as small as possible
      
      This rule is critical for maintaining codebase quality and preventing scope creep.

examples:
  - input: |
      // Task: Fix null pointer bug in user display
      function displayUser(user) {
        return user.name;
      }
    output: |
      // Task: Fix null pointer bug in user display
      function displayUser(user) {
        return user?.name || 'Unknown user';
      }
      
      // NOT:
      // function displayUser(user) {
      //   if (!user) return 'Unknown user';
      //   if (typeof user !== 'object') return 'Invalid user';
      //   return user.name || user.username || user.email || 'Unnamed user';
      // }

metadata:
  priority: high
  version: 1.0
</rule>