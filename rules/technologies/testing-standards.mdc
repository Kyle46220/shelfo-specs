---
description: 
globs: 
alwaysApply: false
---
---
description: Testing standards and patterns for the project using Vitest
globs: **/*.{test,spec}.{ts,tsx,js,jsx}
alwaysApply: true
---

# Testing Standards with Vitest

## Core Principles

1. Use Vitest exclusively - NEVER use Jest
2. Write tests before implementation (TDD)
3. Keep tests focused and isolated
4. Use meaningful test descriptions
5. Follow the Arrange-Act-Assert pattern

## Prohibited Patterns

The following patterns are strictly prohibited:
```typescript
// ❌ NEVER use these imports
import * from '@jest/*'
import * from 'jest-*'
import { jest, expect } from '@jest/globals';
import '@testing-library/jest-dom/extend-expect';

// ❌ NEVER use Jest globals
jest.spyOn()
jest.fn()
jest.mock()
```

## Required Patterns

### Correct Imports
```typescript
// ✅ ALWAYS use these imports
import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/dom';
```

## Test File Structure

- Name test files with `.test.ts` or `.test.tsx` extension
- Place test files next to the files they test
- Follow consistent structure:

```typescript
describe('ComponentName or FunctionName', () => {
  beforeEach(() => {
    // Setup
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  it('should describe expected behavior', () => {
    // Arrange
    const testData = {};

    // Act
    const result = functionUnderTest(testData);

    // Assert
    expect(result).toBe(expectedValue);
  });
});
```

## Mocking Standards

```typescript
// ✅ CORRECT: Vitest mocking
const spy = vi.spyOn(object, 'method');
vi.mock('./module', () => ({
  default: vi.fn(),
  namedExport: vi.fn()
}));
const mockFn = vi.fn();

// Mock timers
vi.useFakeTimers();
vi.runAllTimers();
vi.useRealTimers();

// Mock dates
vi.setSystemTime(new Date('2024-01-01'));
```

## Async Testing

```typescript
it('should handle async operations', async () => {
  // Arrange
  const mockPromise = vi.fn().mockResolvedValue({ data: 'test' });

  // Act
  const result = await asyncFunction();

  // Assert
  expect(result).toEqual({ data: 'test' });
  
  // Wait for all dynamic imports
  await vi.dynamicImportSettled();
});
```

## Component Testing

```typescript
import { render, screen, fireEvent } from '@testing-library/react';

describe('Component', () => {
  it('should render and handle interactions', () => {
    // Arrange
    render(<Component />);

    // Act
    fireEvent.click(screen.getByRole('button'));

    // Assert
    expect(screen.getByText('Expected Text')).toBeInTheDocument();
  });
});
```

## Common Testing Patterns

### Testing Store Integration
```typescript
import { configuratorStore } from './store';

vi.mock('./store', () => ({
  configuratorStore: {
    state: { /* initial state */ },
    actions: {
      updateState: vi.fn()
    }
  }
}));
```

### Testing Hooks
```typescript
import { renderHook, act } from '@testing-library/react';

it('should handle hook logic', () => {
  const { result } = renderHook(() => useCustomHook());

  act(() => {
    result.current.update('new value');
  });

  expect(result.current.value).toBe('new value');
});
```

### Testing API Calls
```typescript
import { rest } from 'msw';
import { setupServer } from 'msw/node';

const server = setupServer(
  rest.get('/api/data', (req, res, ctx) => {
    return res(ctx.json({ data: 'test' }));
  })
);

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());
```

## Coverage Requirements

- Run coverage checks:
```bash
npm run test -- --coverage
```

- Minimum coverage thresholds:
  - Statements: 80%
  - Branches: 80%
  - Functions: 80%
  - Lines: 80%

## Migration Guide

When converting from Jest to Vitest:

1. Replace imports:
```typescript
// From ❌
import { jest, expect } from '@jest/globals';
// To ✅
import { vi, expect } from 'vitest';
```

2. Replace jest-dom:
```typescript
// From ❌
import '@testing-library/jest-dom/extend-expect';
// To ✅
import '@testing-library/dom';
```

3. Replace mocking utilities:
```typescript
// From ❌
jest.spyOn()
jest.fn()
jest.mock()
// To ✅
vi.spyOn()
vi.fn()
vi.mock()
```

## Configuration

```typescript
// vitest.config.ts
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    environment: 'jsdom',
    setupFiles: ['./src/test/setup.ts'],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    },
    globals: true,
    include: ['**/*.{test,spec}.{ts,tsx,js,jsx}']
  }
});
```

## Common Issues and Solutions

1. Jest types appearing in code:
   - Check for leftover @types/jest in package.json
   - Remove any jest-related dependencies
   - Update tsconfig.json to use vitest types

2. Jest matchers not working:
   - Ensure proper imports from vitest
   - Check that @testing-library/dom is imported
   - Verify test setup files are using Vitest

3. Mocking issues:
   - Replace all jest.* calls with vi.*
   - Update mock implementations to use Vitest syntax
   - Check for correct mock cleanup in afterEach

## Important Notes

1. NEVER use Jest functions or matchers
2. Always use `vi` instead of `jest`
3. Use `vi.spyOn()` for monitoring function calls
4. Clear mocks between tests with `vi.clearAllMocks()`
5. Reset modules with `vi.resetModules()` when needed
6. Keep test files close to the components they test
7. Use descriptive test names that explain the expected behavior
8. Follow the Arrange-Act-Assert pattern in test cases

## Metadata
```yaml
name: testing_standards
description: Ensures consistent use of Vitest across the project
version: 1.1
priority: high
```